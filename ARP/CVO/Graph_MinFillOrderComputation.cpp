#include <stdlib.h>

#include "Globals.hxx"

#include "Utils/Sort.hxx"
#include "Utils/AVLtreeSimple.hxx"

#include "Problem.hxx"
#include "Graph.hxx"
#include "VariableOrderComputation.hxx"

static inline int FetchNewAdjVarList(int & nUsed, int & nExists, ARE::AdjVar *TempAdjVarSpaceSizeExtraArray[], ARE::AdjVar * & AdjVarArray, int & AdjVarArraySize) 
{
	AdjVarArray = NULL ;
	AdjVarArraySize = 0 ;
	ARE::AdjVar *list = NULL ;
	if (nUsed < nExists) {
		list = TempAdjVarSpaceSizeExtraArray[nUsed++] ;
		goto have_list ;
		}
	if (nExists >= TempAdjVarSpaceSizeExtraArraySize) 
		return 1 ;
	TempAdjVarSpaceSizeExtraArray[nExists] = new ARE::AdjVar[TempAdjVarSpaceSize] ;
	if (NULL == TempAdjVarSpaceSizeExtraArray[nExists]) 
		return 1 ;
	nUsed = nExists++ ;
	list = TempAdjVarSpaceSizeExtraArray[nUsed] ;
have_list :
	AdjVarArray = list ;
	AdjVarArraySize = TempAdjVarSpaceSize ;
	return 0 ;
}


int ARE::Graph::ComputeVariableEliminationOrder_Simple(char CostFunction, int WidthLimit, bool EarlyTermination_W, double TotalComplexityLimit, bool EarlyTermination_C, bool QuitAfterEasyIsDone, int EasyWidth, int n4RandomPick, double eRandomPick, int & TempAdjVarSpaceSizeExtraArrayN, AdjVar *TempAdjVarSpaceSizeExtraArray[])
{
	_nFillEdges = 0 ;
	if (NULL == _Problem || _nNodes < 1) 
		return 0 ;
	int nRemaining = _nNodes - _OrderLength ;
	if (nRemaining <= 0) 
		return 0 ;

	if (WidthLimit > MAX_DEGREE_OF_GRAPH_NODE) 
		WidthLimit = MAX_DEGREE_OF_GRAPH_NODE ;
	if (EasyWidth < 1) 
		EasyWidth = 1 ;

	bool WidthLimit_is_close_to_INF = (WidthLimit > (INT_MAX/10)) ;

	int i, j, k, X, u, v ;

	_nMFSchanges = 0 ;
	for (i = 0 ; i < _nNodes ; i++) 
		_MFShaschanged[i] = 0 ;

	int IterationIdx = _OrderLength ;

	// this is a list of keeping edges that were part of the graph and were removed and that can be reused
	AdjVar *AdjVarFreeList = NULL ;
	AdjVar *AVFLend = NULL ;
	int TempAdjVarSpaceSizeExtraArrayUsed = 0 ;
	AdjVar *TempAdjVarSpace = NULL ;
	int nTempAdjVarSpace = 0 ;

#define maxNumVarsForPicking 256 // this is built-in hard limit of the number of variables we consider for picking; make it large enough.
	int nVarsToPickFrom ;
	int VarsToPickFrom[maxNumVarsForPicking] ; // make sure this array has at least maxNumVarsForPicking elements
	double VarsToPickFrom_ProbFactor[maxNumVarsForPicking] ; // make sure this array has at least maxNumVarsForPicking elements
	double VarsToPickFrom_Scores[maxNumVarsForPicking] ; // make sure this array has at least maxNumVarsForPicking elements; keep sorted in inc order.
	if (n4RandomPick < 1) 
		n4RandomPick = 1 ;
	else if (n4RandomPick > maxNumVarsForPicking) 
		n4RandomPick = maxNumVarsForPicking ;

	// DEBUGGG
//	printf("\nnTrivial=%d nMFS0=%d nGeneral=%d nOrdered=%d nNodes=%d", _nTrivialNodes, _nMinFillScore0Nodes, _nRemainingNodes, _OrderLength, _nNodes) ;

	// DEBUGGG
//	if (Test(WidthLimit) > 0) 
//		exit(1) ;

// DEBUGGG
//int DEBUGGG_nOrderBefore = 8450 ;
//int DEBUGGG_OrderBefore[8450] = {} ;

pick_next_var :

// DEBUGGGG
//static bool pickDebug = false ;
//if (pickDebug && _OrderLength < DEBUGGG_nOrderBefore) {
//X = DEBUGGG_OrderBefore[_OrderLength] ;
//goto eliminate_picked_variable ;
//}

	/* 2014-04-22 KK : EasyWidth stuff taken out; with some variables designated as ignore, this gets more complicated.
	if (1+nRemaining <= EasyWidth) {
		for (i = 0 ; i < _nTrivialNodes ; i++) {
			X = _TrivialNodesList[i] ;
			_VarType[X] = 0 ;
			_PosOfVarInList[X] = _OrderLength ;
			_VarElimOrder[_OrderLength++] = X ;
			if (_Nodes[X]._Degree > _VarElimOrderWidth) 
				_VarElimOrderWidth = _Nodes[X]._Degree ;
			}
		for (i = 0 ; i < _nMinFillScore0Nodes ; i++) {
			X = _MinFill0ScoreList[i] ;
			_VarType[X] = 0 ;
			_PosOfVarInList[X] = _OrderLength ;
			_VarElimOrder[_OrderLength++] = X ;
			if (_Nodes[X]._Degree > _VarElimOrderWidth) 
				_VarElimOrderWidth = _Nodes[X]._Degree ;
			}
		for (i = 0 ; i < _nRemainingNodes ; i++) {
			X = _RemainingNodesList[i] ;
			_VarType[X] = 0 ;
			_PosOfVarInList[X] = _OrderLength ;
			_VarElimOrder[_OrderLength++] = X ;
			if (_Nodes[X]._Degree > _VarElimOrderWidth) 
				_VarElimOrderWidth = _Nodes[X]._Degree ;
			}
		_nTrivialNodes = _nMinFillScore0Nodes = _nRemainingNodes = 0 ;
		return 0 ;
		}*/

	// if only ignore variables are left, add them and be done
	if (nRemaining <= _nIgnoreVariables) {
		for (i = 0 ; i < _nIgnoreVariables ; i++) {
			X = _IgnoreVariables[i] ;
			_VarType[X] = 0 ;
			_PosOfVarInList[X] = _OrderLength ;
			_VarElimOrder[_OrderLength++] = X ;
			// 2014-04-22 KK : TODO : the next 2 lines may not be correct
			if (_Nodes[X]._Degree > _VarElimOrderWidth) 
				_VarElimOrderWidth = _Nodes[X]._Degree ;
			}
		return 0 ;
		}

	// if there are any (non-ignore) trivial/MinFillScore=0 variables, just pick one
	for (i = 0 ; i < _nTrivialNodes ; i++) {
		u = _TrivialNodesList[i] ;
		if (IsIgnoreVariable(u)) continue ;
		X = u ;
		goto eliminate_picked_variable ;
		}
	for (i = 0 ; i < _nMinFillScore0Nodes ; i++) {
		u = _MinFill0ScoreList[i] ;
		if (IsIgnoreVariable(u)) continue ;
		X = u ;
		goto eliminate_picked_variable ;
		}

	if (QuitAfterEasyIsDone) 
		return 0 ;

	// **********************************************************************
	// BEGIN : old working code
	// **********************************************************************

	/*
	nVarsToPickFrom = 0 ;
	j = INT_MAX ;
	for (i = 0 ; i < _nNodes ; i++) {
		if (_PosOfVarInElimOrder[i] >= 0) 
			continue ;
		if (_Nodes[i]._Degree > WidthLimit) 
			continue ;
		if (_Nodes[i]._MinFillScore < j) {
			VarsToPickFrom[0] = i ;
			nVarsToPickFrom = 1 ;
			j = _Nodes[i]._MinFillScore ;
			continue ;
			}
		if (nVarsToPickFrom >= maxNumVarsForPicking) 
			continue ;
		if (_Nodes[i]._MinFillScore == j) 
			VarsToPickFrom[nVarsToPickFrom++] = i ;
		}
	if (0 == nVarsToPickFrom) 
		return ERRORCODE_EliminationWidthTooLarge ;

	// pick variable to eliminate
	if (nVarsToPickFrom > 1) {
		int nTotal = 0 ;
		for (i = 0 ; i < nVarsToPickFrom ; i++) 
			nTotal += 1 + _Nodes[i]._MinFillScore ;
		j = 1 + _RNG.randInt(nTotal-1) ;
		for (i = 0 ; i < nVarsToPickFrom ; i++) {
			j -= 1 + _Nodes[i]._MinFillScore ;
			if (j <= 0) 
				break ;
			}
		}
	else 
		i = 0 ;
	*/

	// **********************************************************************
	// END : old working code
	// **********************************************************************

	// **********************************************************************
	// Pool size is 1. collect nodes with the best score, and pick on randomly out of these.
	// **********************************************************************

	if (n4RandomPick < 2) {
		nVarsToPickFrom = 0 ;
		__int64 best_score = _I64_MAX ;
		for (i = 0 ; i < _nRemainingNodes ; i++) {
			u = _RemainingNodesList[i] ;
			if (IsIgnoreVariable(u)) continue ;
			if (EarlyTermination_W) {
				if (_Nodes[u]._Degree > WidthLimit) 
					// don't consider variables with larger width that known best width.
					// this may not be optimal, since we really minimize total elimination complexity, and space.
					// however, we want to quickly give up on an ordering computation, if it does not lead to a new better ordering that the previously known best.
					// we use the width as the key.
					continue ;
				}
			if (EarlyTermination_C) {
				if (_Nodes[u]._EliminationScore >= InfiniteSingleVarElimComplexity_log) 
					// don't consider whose elimination complexity if too large.
					continue ;
				}

			// There should be no variables with MinFillScore=0, although it is not important for the code here to work correctly.
			// We will pick n4RandomPick variables with the smallest EliminationComplexity.
			__int64 score ;
			if (1 == CostFunction) 
				score = _Nodes[u]._Degree ;
			else if (2 == CostFunction) 
				score = _Nodes[u]._EliminationScore ;
			else 
				score = _Nodes[u]._MinFillScore ;
			if (score > best_score) 
				continue ;
			if (score < best_score) {
				nVarsToPickFrom = 1 ;
				VarsToPickFrom[0] = u ;
				best_score = score ;
				}
			else if (nVarsToPickFrom < maxNumVarsForPicking) {
				VarsToPickFrom[nVarsToPickFrom++] = u ;
				}
			}
		if (0 == nVarsToPickFrom) 
// DEBUGGG
//{ printf("\nreturn ERRORCODE_NoVariablesLeftToPickFrom") ;
			return ERRORCODE_NoVariablesLeftToPickFrom ;
//}
		else if (1 == nVarsToPickFrom) 
			i = 0 ;
		else 
			i = _RNG.randInt(nVarsToPickFrom-1) ;
		X = VarsToPickFrom[i] ;
		goto eliminate_picked_variable ;
		}

	// **********************************************************************
	// Pool picking
	// **********************************************************************

//#define TEST_COMPL_CORRECT

	nVarsToPickFrom = 0 ;
	for (i = 0 ; i < _nRemainingNodes ; i++) {
		u = _RemainingNodesList[i] ;
		if (IsIgnoreVariable(u)) continue ;
#ifdef TEST_COMPL_CORRECT
{
double c = ComputeEliminationComplexity(u) ;
if (fabs(c - _Nodes[u]._EliminationScore) > 0.001) 
printf("\nERROR : _Nodes[u]._EliminationScore wrong") ;
}
#endif // TEST_COMPL_CORRECT
		if (EarlyTermination_W) {
			if (_Nodes[u]._Degree > WidthLimit) 
				// don't consider variables with larger width that known best width.
				// this may not be optimal, since we really minimize total elimination complexity, and space.
				// however, we want to quickly give up on an ordering computation, if it does not lead to a new better ordering that the previously known best.
				// we use the width as the key.
				continue ;
			}
		if (EarlyTermination_C) {
			if (_Nodes[u]._EliminationScore >= InfiniteSingleVarElimComplexity_log) 
				// don't consider whose elimination complexity if too large.
				continue ;
			}

		// There should be no variables with MinFillScore=0, although it is not important for the code here to work correctly.
		// We will pick n4RandomPick variables with the smallest EliminationComplexity.
		double score ;
		if (1 == CostFunction) 
			score = _Nodes[u]._Degree ;
		else if (2 == CostFunction) {
			score = _Nodes[u]._EliminationScore ;
			}
		else 
			score = _Nodes[u]._MinFillScore ;
		if (nVarsToPickFrom < n4RandomPick) {
			VarsToPickFrom_Scores[nVarsToPickFrom] = score ;
			VarsToPickFrom[nVarsToPickFrom] = u ;
			++nVarsToPickFrom ;
			}
		else {
			// find max
			k = 0 ;
			for (j = 1 ; j < nVarsToPickFrom ; j++) {
				if (VarsToPickFrom_Scores[j] > VarsToPickFrom_Scores[k]) 
					k = j ;
				}
			// if better than max, replace it
			if (score < VarsToPickFrom_Scores[k]) {
				VarsToPickFrom_Scores[k] = score ;
				VarsToPickFrom[k] = u ;
				}
			}
		}
	if (0 == nVarsToPickFrom) 
// DEBUGGG
//{ printf("\nreturn ERRORCODE_NoVariablesLeftToPickFrom---") ;
		return ERRORCODE_NoVariablesLeftToPickFrom ;
//}

	// pick variable to eliminate
	if (nVarsToPickFrom > 1) {
		// we assume that no VarsToPickFrom_ProbFactor[] is 0.
		double nTotal = 0.0 ;
		for (i = 0 ; i < nVarsToPickFrom ; i++) {
			VarsToPickFrom_Scores[i] += 1.0 ;
			if (VarsToPickFrom_Scores[i] > 1000000.0) 
				// this check is necessary so that pow() won't get too large and throw exception.
				// also, note that score should not be 0!!! since pow() will throw exception on that too.
				VarsToPickFrom_Scores[i] = 1000000.0 ;
			// NOTE 2011-02-06 KK : MinComplexity case (2) right now score here is log. we may want to exp() it.
			VarsToPickFrom_ProbFactor[i] = pow(VarsToPickFrom_Scores[i], eRandomPick) ;
			nTotal += VarsToPickFrom_ProbFactor[i] ;
			}
		double r = _RNG.randExc(nTotal) ;
		for (i = 0 ; i < nVarsToPickFrom ; i++) {
			r -= VarsToPickFrom_ProbFactor[i] ;
			if (r < 0.0) 
				break ;
			}
		}
	else 
		i = 0 ;
	X = VarsToPickFrom[i] ;

eliminate_picked_variable :

	// we will collect variables whose MFS has changed in _MFSchangelist[]. 
	// note that we cannot track/check/tak-action when MFS during the update becomes 0, since one op may take it to 0, but the next one may take it to +1, etc.
	// we only can check at the end of the update, which MFSs have become 0.

	/*
		DEF = width is number of variables in a cluster - 1.
	*/

/*
// DEBUGGG
i = -1 ;
for (j = 0 ; j < _nNodes ; j++) {
	if (0 == _VarType[i]) continue ;
	if (i < 0) i = j ;
	else if (_Nodes[i]._Degree > _Nodes[j]._Degree) 
		i = j ;
	}
char Type = ' ' ;
if (1 == _VarType[X]) Type = 'T' ;
else if (2 == _VarType[X]) Type = '0' ;
else if (3 == _VarType[X]) Type = 'G' ;
printf("\nMinFill : round %d w=%d type=%c var=%d degree=%d MinFillScore=%d ElimScore=%I64d totalMinDegree=%d[idx=%d,MFS=%d] ...", (int) _OrderLength, (int) _VarElimOrderWidth, Type, (int) X, (int) _Nodes[X]._Degree, (int) _Nodes[X]._MinFillScore, (__int64) _Nodes[X]._EliminationScore, (int) _Nodes[i]._Degree, (int) i, (int) _Nodes[i]._MinFillScore) ;
//printf("\n        : VarToMinFill0ScoreListMap=%d nTrivial=%d nMinFillScore0Nodes=%d ...", _VarToMinFill0ScoreListMap[X], (int) _nTrivialNodes, (int) _nMinFillScore0Nodes) ;
*/

	RemoveVarFromList(X) ;
	_VarType[X] = 0 ;
	_PosOfVarInList[X] = _OrderLength ;
	_VarElimOrder[_OrderLength++] = X ;
	--nRemaining ;

	if (_Nodes[X]._Degree > _VarElimOrderWidth) 
		_VarElimOrderWidth = _Nodes[X]._Degree ;
	if (_Nodes[X]._EliminationScore > _MaxVarElimComplexity_Log10) 
		_MaxVarElimComplexity_Log10 = _Nodes[X]._EliminationScore ;
//	_TotalVarElimComplexity += _Nodes[X]._EliminationScore ;
#ifdef TEST_COMPL_CORRECT
double xxx = log10(1.0 + pow(10.0, _Nodes[X]._EliminationScore - _TotalVarElimComplexity)) ;
if (xxx < 0.0) {
printf("\nxxx = %g : _Nodes[X]._EliminationScore = %g _TotalVarElimComplexity = %g -=%g pow=%g", 
xxx, _Nodes[X]._EliminationScore, _TotalVarElimComplexity, _Nodes[X]._EliminationScore - _TotalVarElimComplexity, pow(10.0, _Nodes[X]._EliminationScore - _TotalVarElimComplexity)) ;
exit(1) ;
}
#endif // TEST_COMPL_CORRECT
	_TotalVarElimComplexity_Log10 += log10(1.0 + pow(10.0, _Nodes[X]._EliminationScore - _TotalVarElimComplexity_Log10)) ;
	double space = _Nodes[X]._EliminationScore - _Nodes[X]._LogK ;
	_TotalNewFunctionStorageAsNumOfElements_Log10 += log10(1.0 + pow(10.0, space - _TotalNewFunctionStorageAsNumOfElements_Log10)) ;

	if (EarlyTermination_C) {
//printf("\nLAST CHECK : _TotalVarElimComplexity %I64d TotalComplexityLimit %I64d", _TotalVarElimComplexity, TotalComplexityLimit) ;
		// check if the complexity is blown
		if (_TotalVarElimComplexity_Log10 >= TotalComplexityLimit) 
			return ERRORCODE_EliminationComplexityTooLarge ;
		// check if InfiniteSingleVarElimComplexity is blown
		if (_MaxVarElimComplexity_Log10 >= InfiniteSingleVarElimComplexity_log) 
			return ERRORCODE_EliminationComplexityTooLarge ;
		}
	if (EarlyTermination_W) {
		// check if the width is blown
		if (_VarElimOrderWidth >= WidthLimit) 
			return ERRORCODE_EliminationWidthTooLarge ;
		}

	AdjVar *av_X_end = NULL, *av ;

	if (0 == _Nodes[X]._Degree) {
		goto pick_next_var ;
		}
/*	else if (1 == _Nodes[X]._Degree) {
		// update order
		_VarElimOrder[_OrderLength] = X ;
		_PosOfVarInElimOrder[X] = _OrderLength ;
		++_OrderLength ;
		--nRemaining ;
		// collect statistics
		if (_VarElimOrderWidth < 1) 
			_VarElimOrderWidth = 1 ;
		_TotalVarElimComplexity this is incorrect (we now use log) += _Nodes[X]._EliminationScore ;
		_TotalNewFunctionStorageAsNumOfElements this is incorrect (we now use log) += _Problem->K(X) > 0 ? _Nodes[X]._EliminationScore/_Problem->K(X) : 0 ;
		// there are no edges to add; for the one and only neighbor u, subtract degree[u]-1 from the MinFillScore of u.
		u = _Nodes[X]._Neighbors->_V ;
		--_Nodes[u]._Degree ;
		_Nodes[u]._MinFillScore -= _Nodes[u]._Degree ;
		_Nodes[u]._EliminationScore -= _Nodes[X]._LogK ;
		av_X_end = _Nodes[X]._Neighbors ;
		AdjVar *av_u_last = NULL ;
		for (av = _Nodes[u]._Neighbors ; NULL != av ; av = av->_NextAdjVar) {
			if (X == av->_V) {
				if (NULL == av_u_last) 
					{ _Nodes[u]._Neighbors = av->_NextAdjVar ; }
				else 
					{ av_u_last->_NextAdjVar = av->_NextAdjVar ; }
				// add av_u to the list of empty edges
				if (NULL == AVFLend) AdjVarFreeList = AVFLend = av ; else AVFLend->_NextAdjVar = av ; AVFLend = av ; av->_NextAdjVar = NULL ;
				break ;
				}
			av_u_last = av ;
			}
		ProcessPostEliminationNodeListLocation(u) ;
		goto remove_X ;
		}*/

	IterationIdx = _OrderLength ;

	// reduce the graph : remove edges adj to X + add edges between variables adj to X that don't have an edge.
	// when removing an edge, there are two cost updates : 
	//		1) common neighbors of the two endpoints of the edge have +1 (in the future, when the common endpoint is eliminated, one more edge needs to be added)
	//		2) for each non-common neighbor, for both endpoints, the endpoint gets -1, since in the future the endpoint does not have to add an edge
	//		*) note that for us case here, common endpoints are also adj to X, and since they would get both +1 and -1, resulting in 0, and therefore, 
	//			we only have to add -1 for each adj node, not adj to X, for each node adj to X.
	// when adding an edge (u,v), the cost updates are :
	//		1) all common neighbors of u,v get -1 (they no longer have to add an edge in the future, if they were to be eliminated)
	//		2) u/v gets, for each non-common neighbors, +1 since a new edge between v/u and that non-common neighbor needs to be added

//	// TODO/NOTE : we use long to store edges, which leaves 16 bits for variable, limiting nNodes to 16.
//	edges2add.Empty() ;

	int nEdgesAdded = 0 ;

// DEBUGGGG
//static int tempscores[10000] ;
//for (AdjVar *avX = _Nodes[X]._Neighbors ; NULL != avX ; avX = avX->_NextAdjVar) {
//	u = avX->_V ;
//	tempscores[u] = _Nodes[u]._MinFillScore ;
//	}

	AdjVar *avX ;
	for (avX = _Nodes[X]._Neighbors ; NULL != avX ; avX = avX->_NextAdjVar) {
		av_X_end = avX ;
		u = avX->_V ;
		_MFShaschanged[u] = 1 ;
		_MFSchangelist[_nMFSchanges++] = u ;
		_Nodes[u]._Degree-- ;
		_Nodes[u]._EliminationScore -= _Nodes[X]._LogK ;

		// do a comparative scan of neighbor lists of X and u
		AdjVar *av_u = _Nodes[u]._Neighbors ;
		AdjVar *av_X = _Nodes[X]._Neighbors ;
		AdjVar *av_u_last = NULL, *av_u_next ;
move_on :
		if (NULL == av_X) { // all nodes left in av_u are adjacent to u but not to X
			for (; NULL != av_u ; av_u = av_u_next) {
				av_u_next = av_u->_NextAdjVar ;
				if (X == av_u->_V) { // take av_u out of the adjacency list of u
					if (NULL == av_u_last) 
						{ _Nodes[u]._Neighbors = av_u_next ; }
					else 
						{ av_u_last->_NextAdjVar = av_u_next ; }
					// add av_u to the list of empty edges
					if (NULL == AVFLend) AdjVarFreeList = AVFLend = av_u ; else AVFLend->_NextAdjVar = av_u ; AVFLend = av_u ; av_u->_NextAdjVar = NULL ;
					}
				else { // (u,X) edge will be gone; u no longer has to connect av_u->_V and X; subtract 1.
					_Nodes[u]._MinFillScore-- ;
					av_u_last = av_u ;
					}
				}
			continue ;
			}
		if (u == av_X->_V) {
			av_X = av_X->_NextAdjVar ;
			goto move_on ;
			}
		if (NULL == av_u) { // all nodes left in av_X are adjacent to X but not to u; add an edge for each, between (av_X->_V, u)
			for (; NULL != av_X ; av_X = av_X->_NextAdjVar) {
				v = av_X->_V ;
				if (u == v) continue ;

				if (u < v) {
					// edges2add.Insert((u << 16) | v) ; // else edges2add.Insert((v << 16) | u) ; 2010-10-08 KK : add iff u<v, otherwise we would add twice
					if (nEdgesAdded >= ARE_GRAPH_VAR_ORDER_COMP_MAX_NUM_EDGES_ADDED) 
						return ERRORCODE_out_of_memory_CVOedges ;
					_EdgeU[nEdgesAdded] = u ;
					_EdgeV[nEdgesAdded] = v ;
					nEdgesAdded++ ;
					}

				// fetch empty structure
				if (NULL != AdjVarFreeList) { av = AdjVarFreeList ; AdjVarFreeList = AdjVarFreeList->_NextAdjVar ; if (NULL == AdjVarFreeList) AVFLend = NULL ; }
				else {
					if (nTempAdjVarSpace <= 0) {
						int res_NewAdjVarList = FetchNewAdjVarList(TempAdjVarSpaceSizeExtraArrayUsed, TempAdjVarSpaceSizeExtraArrayN, TempAdjVarSpaceSizeExtraArray, TempAdjVarSpace, nTempAdjVarSpace) ;
						if (0 != res_NewAdjVarList || NULL == TempAdjVarSpace || 0 == nTempAdjVarSpace) 
							return ERRORCODE_out_of_memory_CVOadjvarlist ;
						}
					av = TempAdjVarSpace++ ;
					--nTempAdjVarSpace ;
					}

				// update node [u]
				av->_NextAdjVar = NULL ;
				av->_V = v ;
				av->_IterationEdgeAdded = IterationIdx ; // edge iteration index equals the idx of the variable, in the order, that was eliminated during the iteration
				if (NULL == av_u_last) 
					_Nodes[u]._Neighbors = av ;
				else 
					av_u_last->_NextAdjVar = av ;
				av_u_last = av ;
				_Nodes[u]._Degree++ ;
				// update ElimScore later, so that all ElimScore reductions get done first
				}
			continue ;
			}
		if (X == av_u->_V) { // take av_u out of the adjacency list of u
			av_u_next = av_u->_NextAdjVar ;
			if (NULL == av_u_last) 
				{ _Nodes[u]._Neighbors = av_u_next ; }
			else 
				{ av_u_last->_NextAdjVar = av_u_next ; }
			// add av_u to the list of empty edges
			if (NULL == AVFLend) AdjVarFreeList = AVFLend = av_u ; else AVFLend->_NextAdjVar = av_u ; AVFLend = av_u ; av_u->_NextAdjVar = NULL ;
			av_u = av_u_next ;
			goto move_on ;
			}
		if (av_u->_V < av_X->_V) { // av_u->_V is adjacent to u but not to X; subtract 1 from u
			_Nodes[u]._MinFillScore-- ;
			av_u_last = av_u ;
			av_u = av_u->_NextAdjVar ;
			goto move_on ;
			}
		if (av_u->_V > av_X->_V) { // av_X->_V is adjacent to X and not adjacent to u; add an edge between (av_X->_V, u), before av_u in the list of u
			v = av_X->_V ;

			if (u < v) {
				// edges2add.Insert((u << 16) | v) ; // else edges2add.Insert((v << 16) | u) ; 2010-10-08 KK : add iff u<v, otherwise we would add twice
				if (nEdgesAdded >= ARE_GRAPH_VAR_ORDER_COMP_MAX_NUM_EDGES_ADDED) 
					return ERRORCODE_out_of_memory_CVOedges ;
				_EdgeU[nEdgesAdded] = u ;
				_EdgeV[nEdgesAdded] = v ;
				nEdgesAdded++ ;
				}

			// fetch empty structure
			if (NULL != AdjVarFreeList) { av = AdjVarFreeList ; AdjVarFreeList = AdjVarFreeList->_NextAdjVar ; if (NULL == AdjVarFreeList) AVFLend = NULL ; }
			else {
				if (nTempAdjVarSpace <= 0) {
					int res_NewAdjVarList = FetchNewAdjVarList(TempAdjVarSpaceSizeExtraArrayUsed, TempAdjVarSpaceSizeExtraArrayN, TempAdjVarSpaceSizeExtraArray, TempAdjVarSpace, nTempAdjVarSpace) ;
					if (0 != res_NewAdjVarList || NULL == TempAdjVarSpace || 0 == nTempAdjVarSpace) 
						return ERRORCODE_out_of_memory_CVOadjvarlist ;
					}
				av = TempAdjVarSpace++ ;
				--nTempAdjVarSpace ;
				}

			// update node [u]
			av->_NextAdjVar = av_u ;
			av->_V = v ;
			av->_IterationEdgeAdded = IterationIdx ; // edge iteration index equals the idx of the variable, in the order, that was eliminated during the iteration
			if (NULL == av_u_last) {
				_Nodes[u]._Neighbors = av ;
				}
			else {
				av_u_last->_NextAdjVar = av ;
				}
			av_u_last = av ;
			_Nodes[u]._Degree++ ;
			// update ElimScore later, so that all ElimScore reductions get done first

			av_X = av_X->_NextAdjVar ;
			goto move_on ;
			}
		// now it must be that av_u->_V == av_X->_V; ignore this case because the edge (u, av_u->_V) stays
		av_u_last = av_u ;
		av_u = av_u->_NextAdjVar ;
		av_X = av_X->_NextAdjVar ;
		goto move_on ;
		}

	// add edges between nodes (that used to be) adj to X that don't have them yet
	for (i = 0 ; i < nEdgesAdded ; i++) {
		u = _EdgeU[i] ;
		v = _EdgeV[i] ;
		AdjustScoresForArcAddition(u, v, IterationIdx) ;
		_Nodes[u]._EliminationScore += _Nodes[v]._LogK ; // variable u is now connected to v so its elimination score is higher
		_Nodes[v]._EliminationScore += _Nodes[u]._LogK ; // variable v is now connected to u so its elimination score is higher
		}
	_nFillEdges += nEdgesAdded ;

	// check variables whose MinFillScore changed whether they need to be moved to a different list.
	for (i = 0 ; i < _nMFSchanges ; i++) {
		u = _MFSchangelist[i] ;
		_MFShaschanged[u] = 0 ;
		ProcessPostEliminationNodeListLocation(u) ;
		}
	_nMFSchanges = 0 ;

//for (AdjVar *avX = _Nodes[X]._Neighbors ; NULL != avX ; avX = avX->_NextAdjVar) {
//	u = avX->_V ;
//	if (0 == tempscores[u] && _Nodes[u]._MinFillScore != 0) 
//		printf("\nMinFill : score not persistent var=%d; before %d after %d", (int) X, (int) tempscores[u], (int) _Nodes[u]._MinFillScore) ;
//	}

remove_X :

	// dump X from the graph; remove all edges adj to X; use temporary storage to reuse edges adj to X.
	if (NULL != av_X_end) {
		if (NULL == AVFLend) 
			AdjVarFreeList = AVFLend = _Nodes[X]._Neighbors ;
		else 
			AVFLend->_NextAdjVar = _Nodes[X]._Neighbors ;
		AVFLend = av_X_end ;
		AVFLend->_NextAdjVar = NULL ;
		_Nodes[X]._Neighbors = NULL ;
		_Nodes[X]._Degree = 0 ;
		_Nodes[X]._EliminationScore = _Nodes[X]._LogK ;
		_Nodes[X]._MinFillScore = 0 ;
		}

/*
	// DEBUGGG
	if (Test(WidthLimit) > 0) {
		printf("\nMinFill : round %d picked var=%d; Test() failed, will exit ...", (int) _OrderLength, (int) X) ;
		if (NULL != ARE::fpLOG) {
			fprintf(ARE::fpLOG, "\n\nint DEBUGGG_nOrderBefore = %d ;", _OrderLength) ;
			fprintf(ARE::fpLOG, "\nint DEBUGGG_OrderBefore[%d] = {", _OrderLength) ;
			for (i = 0 ; i < _OrderLength ; i++) {
				if (i > 0) fprintf(ARE::fpLOG, ",") ;
				fprintf(ARE::fpLOG, "%d", (int) _VarElimOrder[i]) ;
				}
			fprintf(ARE::fpLOG, "} ;\n") ;
			fflush(ARE::fpLOG) ;
			}
		exit(1) ;
		}
*/

	goto pick_next_var ;
}


int ARE::Graph::ComputeVariableEliminationOrder_Simple_wMinFillOnly(int WidthLimit, bool EarlyTermination_W, bool QuitAfterEasyIsDone, int EasyWidth, int n4RandomPick, double eRandomPick, int & TempAdjVarSpaceSizeExtraArrayN, AdjVar *TempAdjVarSpaceSizeExtraArray[])
{
	_nFillEdges = 0 ;
	if (_nNodes < 1) 
		return 0 ;
	int nRemaining = _nNodes - _OrderLength ;
	if (nRemaining <= 0) 
		return 0 ;

	if (WidthLimit > MAX_DEGREE_OF_GRAPH_NODE) 
		WidthLimit = MAX_DEGREE_OF_GRAPH_NODE ;
	if (EasyWidth < 1) 
		EasyWidth = 1 ;

	bool WidthLimit_is_close_to_INF = (WidthLimit > (INT_MAX/10)) ;

	int i, j, k, X, u, v ;

	_nMFSchanges = 0 ;
	for (i = 0 ; i < _nNodes ; i++) 
		_MFShaschanged[i] = 0 ;

	int IterationIdx = _OrderLength ;

	// this is a list of keeping edges that were part of the graph and were removed and that can be reused
	AdjVar *AdjVarFreeList = NULL ;
	AdjVar *AVFLend = NULL ;
	int TempAdjVarSpaceSizeExtraArrayUsed = 0 ;
	AdjVar *TempAdjVarSpace = NULL ;
	int nTempAdjVarSpace = 0 ;

#define maxNumVarsForPicking 256 // this is built-in hard limit of the number of variables we consider for picking; make it large enough.
	int nVarsToPickFrom ;
	int VarsToPickFrom[maxNumVarsForPicking] ; // make sure this array has at least maxNumVarsForPicking elements
	double VarsToPickFrom_ProbFactor[maxNumVarsForPicking] ; // make sure this array has at least maxNumVarsForPicking elements
	double VarsToPickFrom_Scores[maxNumVarsForPicking] ; // make sure this array has at least maxNumVarsForPicking elements; keep sorted in inc order.
	if (n4RandomPick < 1) 
		n4RandomPick = 1 ;
	else if (n4RandomPick > maxNumVarsForPicking) 
		n4RandomPick = maxNumVarsForPicking ;

	// DEBUGGG
//	printf("\nnTrivial=%d nMFS0=%d nGeneral=%d nOrdered=%d nNodes=%d", _nTrivialNodes, _nMinFillScore0Nodes, _nRemainingNodes, _OrderLength, _nNodes) ;

	// DEBUGGG
//	if (Test(WidthLimit) > 0) 
//		exit(1) ;

// DEBUGGG
//int DEBUGGG_nOrderBefore = 8450 ;
//int DEBUGGG_OrderBefore[8450] = {} ;

pick_next_var :

// DEBUGGGG
//static bool pickDebug = false ;
//if (pickDebug && _OrderLength < DEBUGGG_nOrderBefore) {
//X = DEBUGGG_OrderBefore[_OrderLength] ;
//goto eliminate_picked_variable ;
//}

	/* 2014-04-22 KK : EasyWidth stuff taken out; with some variables designated as ignore, this gets more complicated.
	if (1+nRemaining <= EasyWidth) {
		for (i = 0 ; i < _nTrivialNodes ; i++) {
			X = _TrivialNodesList[i] ;
			_VarType[X] = 0 ;
			_PosOfVarInList[X] = _OrderLength ;
			_VarElimOrder[_OrderLength++] = X ;
			if (_Nodes[X]._Degree > _VarElimOrderWidth) 
				_VarElimOrderWidth = _Nodes[X]._Degree ;
			}
		for (i = 0 ; i < _nMinFillScore0Nodes ; i++) {
			X = _MinFill0ScoreList[i] ;
			_VarType[X] = 0 ;
			_PosOfVarInList[X] = _OrderLength ;
			_VarElimOrder[_OrderLength++] = X ;
			if (_Nodes[X]._Degree > _VarElimOrderWidth) 
				_VarElimOrderWidth = _Nodes[X]._Degree ;
			}
		for (i = 0 ; i < _nRemainingNodes ; i++) {
			X = _RemainingNodesList[i] ;
			_VarType[X] = 0 ;
			_PosOfVarInList[X] = _OrderLength ;
			_VarElimOrder[_OrderLength++] = X ;
			if (_Nodes[X]._Degree > _VarElimOrderWidth) 
				_VarElimOrderWidth = _Nodes[X]._Degree ;
			}
		_nTrivialNodes = _nMinFillScore0Nodes = _nRemainingNodes = 0 ;
		return 0 ;
		}*/

	// if only ignore variables are left, add them and be done
	if (nRemaining <= _nIgnoreVariables) {
		for (i = 0 ; i < _nIgnoreVariables ; i++) {
			X = _IgnoreVariables[i] ;
			_VarType[X] = 0 ;
			_PosOfVarInList[X] = _OrderLength ;
			_VarElimOrder[_OrderLength++] = X ;
			// 2014-04-22 KK : TODO : the next 2 lines may not be correct
			if (_Nodes[X]._Degree > _VarElimOrderWidth) 
				_VarElimOrderWidth = _Nodes[X]._Degree ;
			}
		return 0 ;
		}

	// if there are any (non-ignore) trivial/MinFillScore=0 variables, just pick one
	for (i = 0 ; i < _nTrivialNodes ; i++) {
		u = _TrivialNodesList[i] ;
		if (IsIgnoreVariable(u)) continue ;
		X = u ;
		goto eliminate_picked_variable ;
		}
	for (i = 0 ; i < _nMinFillScore0Nodes ; i++) {
		u = _MinFill0ScoreList[i] ;
		if (IsIgnoreVariable(u)) continue ;
		X = u ;
		goto eliminate_picked_variable ;
		}

	if (QuitAfterEasyIsDone) 
		return 0 ;

	// **********************************************************************
	// BEGIN : old working code
	// **********************************************************************

	/*
	nVarsToPickFrom = 0 ;
	j = INT_MAX ;
	for (i = 0 ; i < _nNodes ; i++) {
		if (_PosOfVarInElimOrder[i] >= 0) 
			continue ;
		if (_Nodes[i]._Degree > WidthLimit) 
			continue ;
		if (_Nodes[i]._MinFillScore < j) {
			VarsToPickFrom[0] = i ;
			nVarsToPickFrom = 1 ;
			j = _Nodes[i]._MinFillScore ;
			continue ;
			}
		if (nVarsToPickFrom >= maxNumVarsForPicking) 
			continue ;
		if (_Nodes[i]._MinFillScore == j) 
			VarsToPickFrom[nVarsToPickFrom++] = i ;
		}
	if (0 == nVarsToPickFrom) 
		return ERRORCODE_EliminationWidthTooLarge ;

	// pick variable to eliminate
	if (nVarsToPickFrom > 1) {
		int nTotal = 0 ;
		for (i = 0 ; i < nVarsToPickFrom ; i++) 
			nTotal += 1 + _Nodes[i]._MinFillScore ;
		j = 1 + _RNG.randInt(nTotal-1) ;
		for (i = 0 ; i < nVarsToPickFrom ; i++) {
			j -= 1 + _Nodes[i]._MinFillScore ;
			if (j <= 0) 
				break ;
			}
		}
	else 
		i = 0 ;
	*/

	// **********************************************************************
	// END : old working code
	// **********************************************************************

	// **********************************************************************
	// Pool size is 1. collect nodes with the best score, and pick on randomly out of these.
	// **********************************************************************

	if (n4RandomPick < 2) {
		nVarsToPickFrom = 0 ;
		__int64 best_score = _I64_MAX ;
		for (i = 0 ; i < _nRemainingNodes ; i++) {
			u = _RemainingNodesList[i] ;
			if (IsIgnoreVariable(u)) continue ;
			if (EarlyTermination_W) {
				if (_Nodes[u]._Degree > WidthLimit) 
					// don't consider variables with larger width that known best width.
					// this may not be optimal, since we really minimize total elimination complexity, and space.
					// however, we want to quickly give up on an ordering computation, if it does not lead to a new better ordering that the previously known best.
					// we use the width as the key.
					continue ;
				}

			// There should be no variables with MinFillScore=0, although it is not important for the code here to work correctly.
			// We will pick n4RandomPick variables with the smallest EliminationComplexity.
			__int64 score = _Nodes[u]._MinFillScore ;
			if (score > best_score) 
				continue ;
			if (score < best_score) {
				nVarsToPickFrom = 1 ;
				VarsToPickFrom[0] = u ;
				best_score = score ;
				}
			else if (nVarsToPickFrom < maxNumVarsForPicking) {
				VarsToPickFrom[nVarsToPickFrom++] = u ;
				}
			}
		if (0 == nVarsToPickFrom) 
// DEBUGGG
//{ printf("\nreturn ERRORCODE_NoVariablesLeftToPickFrom") ;
			return ERRORCODE_NoVariablesLeftToPickFrom ;
//}
		else if (1 == nVarsToPickFrom) 
			i = 0 ;
		else 
			i = _RNG.randInt(nVarsToPickFrom-1) ;
		X = VarsToPickFrom[i] ;
		goto eliminate_picked_variable ;
		}

	// **********************************************************************
	// Pool picking
	// **********************************************************************

//#define TEST_COMPL_CORRECT

	nVarsToPickFrom = 0 ;
	for (i = 0 ; i < _nRemainingNodes ; i++) {
		u = _RemainingNodesList[i] ;
		if (IsIgnoreVariable(u)) continue ;
		if (EarlyTermination_W) {
			if (_Nodes[u]._Degree > WidthLimit) 
				// don't consider variables with larger width that known best width.
				// this may not be optimal, since we really minimize total elimination complexity, and space.
				// however, we want to quickly give up on an ordering computation, if it does not lead to a new better ordering that the previously known best.
				// we use the width as the key.
				continue ;
			}

		// There should be no variables with MinFillScore=0, although it is not important for the code here to work correctly.
		// We will pick n4RandomPick variables with the smallest EliminationComplexity.
		double score = _Nodes[u]._MinFillScore ;
		if (nVarsToPickFrom < n4RandomPick) {
			VarsToPickFrom_Scores[nVarsToPickFrom] = score ;
			VarsToPickFrom[nVarsToPickFrom] = u ;
			++nVarsToPickFrom ;
			}
		else {
			// find max
			k = 0 ;
			for (j = 1 ; j < nVarsToPickFrom ; j++) {
				if (VarsToPickFrom_Scores[j] > VarsToPickFrom_Scores[k]) 
					k = j ;
				}
			// if better than max, replace it
			if (score < VarsToPickFrom_Scores[k]) {
				VarsToPickFrom_Scores[k] = score ;
				VarsToPickFrom[k] = u ;
				}
			}
		}
	if (0 == nVarsToPickFrom) 
// DEBUGGG
//{ printf("\nreturn ERRORCODE_NoVariablesLeftToPickFrom---") ;
		return ERRORCODE_NoVariablesLeftToPickFrom ;
//}

	// pick variable to eliminate
	if (nVarsToPickFrom > 1) {
		// we assume that no VarsToPickFrom_ProbFactor[] is 0.
		double nTotal = 0.0 ;
		for (i = 0 ; i < nVarsToPickFrom ; i++) {
			VarsToPickFrom_Scores[i] += 1.0 ;
			if (VarsToPickFrom_Scores[i] > 1000000.0) 
				// this check is necessary so that pow() won't get too large and throw exception.
				// also, note that score should not be 0!!! since pow() will throw exception on that too.
				VarsToPickFrom_Scores[i] = 1000000.0 ;
			// NOTE 2011-02-06 KK : MinComplexity case (2) right now score here is log. we may want to exp() it.
			VarsToPickFrom_ProbFactor[i] = pow(VarsToPickFrom_Scores[i], eRandomPick) ;
			nTotal += VarsToPickFrom_ProbFactor[i] ;
			}
		double r = _RNG.randExc(nTotal) ;
		for (i = 0 ; i < nVarsToPickFrom ; i++) {
			r -= VarsToPickFrom_ProbFactor[i] ;
			if (r < 0.0) 
				break ;
			}
		}
	else 
		i = 0 ;
	X = VarsToPickFrom[i] ;

eliminate_picked_variable :

	// we will collect variables whose MFS has changed in _MFSchangelist[]. 
	// note that we cannot track/check/tak-action when MFS during the update becomes 0, since one op may take it to 0, but the next one may take it to +1, etc.
	// we only can check at the end of the update, which MFSs have become 0.

	/*
		DEF = width is number of variables in a cluster - 1.
	*/

/*
// DEBUGGG
i = -1 ;
for (j = 0 ; j < _nNodes ; j++) {
	if (0 == _VarType[i]) continue ;
	if (i < 0) i = j ;
	else if (_Nodes[i]._Degree > _Nodes[j]._Degree) 
		i = j ;
	}
char Type = ' ' ;
if (1 == _VarType[X]) Type = 'T' ;
else if (2 == _VarType[X]) Type = '0' ;
else if (3 == _VarType[X]) Type = 'G' ;
printf("\nMinFill : round %d w=%d type=%c var=%d degree=%d MinFillScore=%d ElimScore=%I64d totalMinDegree=%d[idx=%d,MFS=%d] ...", (int) _OrderLength, (int) _VarElimOrderWidth, Type, (int) X, (int) _Nodes[X]._Degree, (int) _Nodes[X]._MinFillScore, (__int64) _Nodes[X]._EliminationScore, (int) _Nodes[i]._Degree, (int) i, (int) _Nodes[i]._MinFillScore) ;
//printf("\n        : VarToMinFill0ScoreListMap=%d nTrivial=%d nMinFillScore0Nodes=%d ...", _VarToMinFill0ScoreListMap[X], (int) _nTrivialNodes, (int) _nMinFillScore0Nodes) ;
*/

	RemoveVarFromList(X) ;
	_VarType[X] = 0 ;
	_PosOfVarInList[X] = _OrderLength ;
	_VarElimOrder[_OrderLength++] = X ;
	--nRemaining ;

	if (_Nodes[X]._Degree > _VarElimOrderWidth) 
		_VarElimOrderWidth = _Nodes[X]._Degree ;

	if (EarlyTermination_W) {
		// check if the width is blown
		if (_VarElimOrderWidth >= WidthLimit) 
			return ERRORCODE_EliminationWidthTooLarge ;
		}

	AdjVar *av_X_end = NULL, *av ;

	if (0 == _Nodes[X]._Degree) {
		goto pick_next_var ;
		}
/*	else if (1 == _Nodes[X]._Degree) {
		// update order
		_VarElimOrder[_OrderLength] = X ;
		_PosOfVarInElimOrder[X] = _OrderLength ;
		++_OrderLength ;
		--nRemaining ;
		// collect statistics
		if (_VarElimOrderWidth < 1) 
			_VarElimOrderWidth = 1 ;
		_TotalVarElimComplexity this is incorrect (we now use log) += _Nodes[X]._EliminationScore ;
		_TotalNewFunctionStorageAsNumOfElements this is incorrect (we now use log) += _Problem->K(X) > 0 ? _Nodes[X]._EliminationScore/_Problem->K(X) : 0 ;
		// there are no edges to add; for the one and only neighbor u, subtract degree[u]-1 from the MinFillScore of u.
		u = _Nodes[X]._Neighbors->_V ;
		--_Nodes[u]._Degree ;
		_Nodes[u]._MinFillScore -= _Nodes[u]._Degree ;
		_Nodes[u]._EliminationScore -= _Nodes[X]._LogK ;
		av_X_end = _Nodes[X]._Neighbors ;
		AdjVar *av_u_last = NULL ;
		for (av = _Nodes[u]._Neighbors ; NULL != av ; av = av->_NextAdjVar) {
			if (X == av->_V) {
				if (NULL == av_u_last) 
					{ _Nodes[u]._Neighbors = av->_NextAdjVar ; }
				else 
					{ av_u_last->_NextAdjVar = av->_NextAdjVar ; }
				// add av_u to the list of empty edges
				if (NULL == AVFLend) AdjVarFreeList = AVFLend = av ; else AVFLend->_NextAdjVar = av ; AVFLend = av ; av->_NextAdjVar = NULL ;
				break ;
				}
			av_u_last = av ;
			}
		ProcessPostEliminationNodeListLocation(u) ;
		goto remove_X ;
		}*/

	IterationIdx = _OrderLength ;

	// reduce the graph : remove edges adj to X + add edges between variables adj to X that don't have an edge.
	// when removing an edge, there are two cost updates : 
	//		1) common neighbors of the two endpoints of the edge have +1 (in the future, when the common endpoint is eliminated, one more edge needs to be added)
	//		2) for each non-common neighbor, for both endpoints, the endpoint gets -1, since in the future the endpoint does not have to add an edge
	//		*) note that for us case here, common endpoints are also adj to X, and since they would get both +1 and -1, resulting in 0, and therefore, 
	//			we only have to add -1 for each adj node, not adj to X, for each node adj to X.
	// when adding an edge (u,v), the cost updates are :
	//		1) all common neighbors of u,v get -1 (they no longer have to add an edge in the future, if they were to be eliminated)
	//		2) u/v gets, for each non-common neighbors, +1 since a new edge between v/u and that non-common neighbor needs to be added

//	// TODO/NOTE : we use long to store edges, which leaves 16 bits for variable, limiting nNodes to 16.
//	edges2add.Empty() ;

	int nEdgesAdded = 0 ;

// DEBUGGGG
//static int tempscores[10000] ;
//for (AdjVar *avX = _Nodes[X]._Neighbors ; NULL != avX ; avX = avX->_NextAdjVar) {
//	u = avX->_V ;
//	tempscores[u] = _Nodes[u]._MinFillScore ;
//	}

	AdjVar *avX ;
	for (avX = _Nodes[X]._Neighbors ; NULL != avX ; avX = avX->_NextAdjVar) {
		av_X_end = avX ;
		u = avX->_V ;
		_MFShaschanged[u] = 1 ;
		_MFSchangelist[_nMFSchanges++] = u ;
		_Nodes[u]._Degree-- ;

		// do a comparative scan of neighbor lists of X and u
		AdjVar *av_u = _Nodes[u]._Neighbors ;
		AdjVar *av_X = _Nodes[X]._Neighbors ;
		AdjVar *av_u_last = NULL, *av_u_next ;
move_on :
		if (NULL == av_X) { // all nodes left in av_u are adjacent to u but not to X
			for (; NULL != av_u ; av_u = av_u_next) {
				av_u_next = av_u->_NextAdjVar ;
				if (X == av_u->_V) { // take av_u out of the adjacency list of u
					if (NULL == av_u_last) 
						{ _Nodes[u]._Neighbors = av_u_next ; }
					else 
						{ av_u_last->_NextAdjVar = av_u_next ; }
					// add av_u to the list of empty edges
					if (NULL == AVFLend) AdjVarFreeList = AVFLend = av_u ; else AVFLend->_NextAdjVar = av_u ; AVFLend = av_u ; av_u->_NextAdjVar = NULL ;
					}
				else { // (u,X) edge will be gone; u no longer has to connect av_u->_V and X; subtract 1.
					_Nodes[u]._MinFillScore-- ;
					av_u_last = av_u ;
					}
				}
			continue ;
			}
		if (u == av_X->_V) {
			av_X = av_X->_NextAdjVar ;
			goto move_on ;
			}
		if (NULL == av_u) { // all nodes left in av_X are adjacent to X but not to u; add an edge for each, between (av_X->_V, u)
			for (; NULL != av_X ; av_X = av_X->_NextAdjVar) {
				v = av_X->_V ;
				if (u == v) continue ;

				if (u < v) {
					// edges2add.Insert((u << 16) | v) ; // else edges2add.Insert((v << 16) | u) ; 2010-10-08 KK : add iff u<v, otherwise we would add twice
					if (nEdgesAdded >= ARE_GRAPH_VAR_ORDER_COMP_MAX_NUM_EDGES_ADDED) 
						return ERRORCODE_out_of_memory_CVOedges ;
					_EdgeU[nEdgesAdded] = u ;
					_EdgeV[nEdgesAdded] = v ;
					nEdgesAdded++ ;
					}

				// fetch empty structure
				if (NULL != AdjVarFreeList) { av = AdjVarFreeList ; AdjVarFreeList = AdjVarFreeList->_NextAdjVar ; if (NULL == AdjVarFreeList) AVFLend = NULL ; }
				else {
					if (nTempAdjVarSpace <= 0) {
						int res_NewAdjVarList = FetchNewAdjVarList(TempAdjVarSpaceSizeExtraArrayUsed, TempAdjVarSpaceSizeExtraArrayN, TempAdjVarSpaceSizeExtraArray, TempAdjVarSpace, nTempAdjVarSpace) ;
						if (0 != res_NewAdjVarList || NULL == TempAdjVarSpace || 0 == nTempAdjVarSpace) 
							return ERRORCODE_out_of_memory_CVOadjvarlist ;
						}
					av = TempAdjVarSpace++ ;
					--nTempAdjVarSpace ;
					}

				// update node [u]
				av->_NextAdjVar = NULL ;
				av->_V = v ;
				av->_IterationEdgeAdded = IterationIdx ; // edge iteration index equals the idx of the variable, in the order, that was eliminated during the iteration
				if (NULL == av_u_last) 
					_Nodes[u]._Neighbors = av ;
				else 
					av_u_last->_NextAdjVar = av ;
				av_u_last = av ;
				_Nodes[u]._Degree++ ;
				// update ElimScore later, so that all ElimScore reductions get done first
				}
			continue ;
			}
		if (X == av_u->_V) { // take av_u out of the adjacency list of u
			av_u_next = av_u->_NextAdjVar ;
			if (NULL == av_u_last) 
				{ _Nodes[u]._Neighbors = av_u_next ; }
			else 
				{ av_u_last->_NextAdjVar = av_u_next ; }
			// add av_u to the list of empty edges
			if (NULL == AVFLend) AdjVarFreeList = AVFLend = av_u ; else AVFLend->_NextAdjVar = av_u ; AVFLend = av_u ; av_u->_NextAdjVar = NULL ;
			av_u = av_u_next ;
			goto move_on ;
			}
		if (av_u->_V < av_X->_V) { // av_u->_V is adjacent to u but not to X; subtract 1 from u
			_Nodes[u]._MinFillScore-- ;
			av_u_last = av_u ;
			av_u = av_u->_NextAdjVar ;
			goto move_on ;
			}
		if (av_u->_V > av_X->_V) { // av_X->_V is adjacent to X and not adjacent to u; add an edge between (av_X->_V, u), before av_u in the list of u
			v = av_X->_V ;

			if (u < v) {
				// edges2add.Insert((u << 16) | v) ; // else edges2add.Insert((v << 16) | u) ; 2010-10-08 KK : add iff u<v, otherwise we would add twice
				if (nEdgesAdded >= ARE_GRAPH_VAR_ORDER_COMP_MAX_NUM_EDGES_ADDED) 
					return ERRORCODE_out_of_memory_CVOedges ;
				_EdgeU[nEdgesAdded] = u ;
				_EdgeV[nEdgesAdded] = v ;
				nEdgesAdded++ ;
				}

			// fetch empty structure
			if (NULL != AdjVarFreeList) { av = AdjVarFreeList ; AdjVarFreeList = AdjVarFreeList->_NextAdjVar ; if (NULL == AdjVarFreeList) AVFLend = NULL ; }
			else {
				if (nTempAdjVarSpace <= 0) {
					int res_NewAdjVarList = FetchNewAdjVarList(TempAdjVarSpaceSizeExtraArrayUsed, TempAdjVarSpaceSizeExtraArrayN, TempAdjVarSpaceSizeExtraArray, TempAdjVarSpace, nTempAdjVarSpace) ;
					if (0 != res_NewAdjVarList || NULL == TempAdjVarSpace || 0 == nTempAdjVarSpace) 
						return ERRORCODE_out_of_memory_CVOadjvarlist ;
					}
				av = TempAdjVarSpace++ ;
				--nTempAdjVarSpace ;
				}

			// update node [u]
			av->_NextAdjVar = av_u ;
			av->_V = v ;
			av->_IterationEdgeAdded = IterationIdx ; // edge iteration index equals the idx of the variable, in the order, that was eliminated during the iteration
			if (NULL == av_u_last) {
				_Nodes[u]._Neighbors = av ;
				}
			else {
				av_u_last->_NextAdjVar = av ;
				}
			av_u_last = av ;
			_Nodes[u]._Degree++ ;
			// update ElimScore later, so that all ElimScore reductions get done first

			av_X = av_X->_NextAdjVar ;
			goto move_on ;
			}
		// now it must be that av_u->_V == av_X->_V; ignore this case because the edge (u, av_u->_V) stays
		av_u_last = av_u ;
		av_u = av_u->_NextAdjVar ;
		av_X = av_X->_NextAdjVar ;
		goto move_on ;
		}

	// add edges between nodes (that used to be) adj to X that don't have them yet
	for (i = 0 ; i < nEdgesAdded ; i++) {
		u = _EdgeU[i] ;
		v = _EdgeV[i] ;
		AdjustScoresForArcAddition(u, v, IterationIdx) ;
		}
	_nFillEdges += nEdgesAdded ;

	// check variables whose MinFillScore changed whether they need to be moved to a different list.
	for (i = 0 ; i < _nMFSchanges ; i++) {
		u = _MFSchangelist[i] ;
		_MFShaschanged[u] = 0 ;
		ProcessPostEliminationNodeListLocation(u) ;
		}
	_nMFSchanges = 0 ;

//for (AdjVar *avX = _Nodes[X]._Neighbors ; NULL != avX ; avX = avX->_NextAdjVar) {
//	u = avX->_V ;
//	if (0 == tempscores[u] && _Nodes[u]._MinFillScore != 0) 
//		printf("\nMinFill : score not persistent var=%d; before %d after %d", (int) X, (int) tempscores[u], (int) _Nodes[u]._MinFillScore) ;
//	}

remove_X :

	// dump X from the graph; remove all edges adj to X; use temporary storage to reuse edges adj to X.
	if (NULL != av_X_end) {
		if (NULL == AVFLend) 
			AdjVarFreeList = AVFLend = _Nodes[X]._Neighbors ;
		else 
			AVFLend->_NextAdjVar = _Nodes[X]._Neighbors ;
		AVFLend = av_X_end ;
		AVFLend->_NextAdjVar = NULL ;
		_Nodes[X]._Neighbors = NULL ;
		_Nodes[X]._Degree = 0 ;
		_Nodes[X]._MinFillScore = 0 ;
		}

/*
	// DEBUGGG
	if (Test(WidthLimit) > 0) {
		printf("\nMinFill : round %d picked var=%d; Test() failed, will exit ...", (int) _OrderLength, (int) X) ;
		if (NULL != ARE::fpLOG) {
			fprintf(ARE::fpLOG, "\n\nint DEBUGGG_nOrderBefore = %d ;", _OrderLength) ;
			fprintf(ARE::fpLOG, "\nint DEBUGGG_OrderBefore[%d] = {", _OrderLength) ;
			for (i = 0 ; i < _OrderLength ; i++) {
				if (i > 0) fprintf(ARE::fpLOG, ",") ;
				fprintf(ARE::fpLOG, "%d", (int) _VarElimOrder[i]) ;
				}
			fprintf(ARE::fpLOG, "} ;\n") ;
			fflush(ARE::fpLOG) ;
			}
		exit(1) ;
		}
*/

	goto pick_next_var ;
}


int ARE::Graph::ComputeVariableEliminationOrder_LowerBound(void)
{
	if (NULL == _Problem || _nNodes < 1) 
		return 0 ;
	int nRemaining = _nNodes - _OrderLength ;
	if (nRemaining <= 0) 
		return 0 ;

	// we will eliminate variables one at a time, picking a min-degree variable at each time.
	// when eliminating a variable, we simple drop it, remove adjacent edges, and add no new edges.
	// max degree of any variable eliminated is a lower bound on induced width.

	int i, j, k, X, u, v ;

#define maxNumVarsForPicking 256 // this is built-in hard limit of the number of variables we consider for picking; make it large enough.
	int nVarsToPickFrom ;
	int VarsToPickFrom[maxNumVarsForPicking] ; // make sure this array has at least maxNumVarsForPicking elements
  int degree ;

pick_next_var :

	// if only ignore variables are left, be done
	if (nRemaining <= _nIgnoreVariables) 
		return 0 ;

	// if there are any (non-ignore) trivial/MinFillScore=0 variables, just pick one
	for (i = 0 ; i < _nTrivialNodes ; i++) {
		u = _TrivialNodesList[i] ;
		if (IsIgnoreVariable(u)) continue ;
		X = u ;
		goto eliminate_picked_variable ;
		}
	for (i = 0 ; i < _nMinFillScore0Nodes ; i++) {
		u = _MinFill0ScoreList[i] ;
		if (IsIgnoreVariable(u)) continue ;
		X = u ;
		goto eliminate_picked_variable ;
		}

	// collect min-degree nodes out of general nodes
	u = _RemainingNodesList[0] ;
	VarsToPickFrom[0] = u ;
	nVarsToPickFrom = 1 ;
	degree = _Nodes[u]._Degree ;
	for (i = 1 ; i < _nRemainingNodes ; i++) {
		u = _RemainingNodesList[i] ;
		if (IsIgnoreVariable(u)) continue ;
		if (_Nodes[u]._Degree > degree) continue ;
		if (_Nodes[u]._Degree < degree) {
			nVarsToPickFrom = 1 ;
			VarsToPickFrom[0] = u ;
			degree = _Nodes[u]._Degree ;
			}
		else if (nVarsToPickFrom < maxNumVarsForPicking) {
			VarsToPickFrom[nVarsToPickFrom++] = u ;
			}
		}
	if (0 == nVarsToPickFrom) 
		return ERRORCODE_NoVariablesLeftToPickFrom ;
	if (1 == nVarsToPickFrom) 
		i = 0 ;
	else 
		i = _RNG.randInt(nVarsToPickFrom-1) ;
	X = VarsToPickFrom[i] ;
	goto eliminate_picked_variable ;

eliminate_picked_variable :

	/*
		DEF = width is number of variables in a cluster - 1.
	*/

	RemoveVarFromList(X) ;
	_VarType[X] = 0 ;
	_PosOfVarInList[X] = _OrderLength ;
	_VarElimOrder[_OrderLength++] = X ;
	--nRemaining ;

	if (_Nodes[X]._Degree > _VarElimOrderWidth) 
		_VarElimOrderWidth = _Nodes[X]._Degree ;

	if (0 == _Nodes[X]._Degree) {
		goto pick_next_var ;
		}

	for (AdjVar *avX = _Nodes[X]._Neighbors ; NULL != avX ; avX = avX->_NextAdjVar) {
		u = avX->_V ;
		_Nodes[u]._Degree-- ;

		/* we don't really need to update adjacency list of u; its degree is already updated
		AdjVar *av_u_last = NULL, *av_u_next ;
		for (AdjVar *av_u = _Nodes[u]._Neighbors ; NULL != av_u ; av_u = av_u_next) {
			av_u_next = av_u->_NextAdjVar ;
			if (X == av_u->_V) { // take av_u out of the adjacency list of u
				if (NULL == av_u_last) 
					{ _Nodes[u]._Neighbors = av_u_next ; }
				else 
					{ av_u_last->_NextAdjVar = av_u_next ; }
				break ;
				}
			}*/
		}

	goto pick_next_var ;
}

